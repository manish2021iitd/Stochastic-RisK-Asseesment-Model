import pandas as pd
import numpy as np
import scipy.stats as stats

# Load pre-cleaned Parquet file
df = pd.read_parquet("data/clean/supplygraph_clean_v1.parquet")

# --- Feature Engineering ---
df = df.sort_values(by=['Customer Id', 'order date (DateOrders)'])

# Inter-arrival times (days)
df['interarrival'] = df.groupby('Customer Id')['order date (DateOrders)'].diff().dt.days

# Severity proxy (absolute profit ratio)
df['severity'] = df['Order Item Profit Ratio'].abs()

# Lead-time variance
df['lead_time_var'] = (df['Days for shipping (real)'] - df['Days for shipment (scheduled)']).abs()

# Keep only non-negative values
data = df[['interarrival', 'severity', 'lead_time_var']].dropna()
data = data[data > 0].dropna()

# --- Distribution fitting function ---
def fit_and_gof(series, dist_name):
    dist_map = {
        'expon': stats.expon,
        'weibull': stats.weibull_min,
        'lognorm': stats.lognorm,
        'pareto': stats.pareto
    }
    dist = dist_map[dist_name]

    # Fit distribution
    params = dist.fit(series)

    # Goodness of Fit: KS test
    D, _ = stats.kstest(series, dist_name, args=params)

    # AIC and BIC
    loglik = np.sum(dist.logpdf(series, *params))
    k = len(params)
    n = len(series)
    aic = 2 * k - 2 * loglik
    bic = k * np.log(n) - 2 * loglik

    return {
        'Distribution': dist_name,
        'Params': params,
        'KS_stat': D,
        'AIC': aic,
        'BIC': bic
    }

# --- Fit distributions ---
results = []
variables = {
    'interarrival': data['interarrival'],
    'severity': data['severity'],
    'lead_time_var': data['lead_time_var']
}
distributions = ['expon', 'weibull', 'lognorm', 'pareto']

for var_name, series in variables.items():
    for dist_name in distributions:
        try:
            result = fit_and_gof(series, dist_name)
            result['Variable'] = var_name
            results.append(result)
        except Exception as e:
            print(f"Failed on {var_name} with {dist_name}: {e}")

# --- Summarize and export ---
gof_df = pd.DataFrame(results)
gof_df = gof_df[['Variable', 'Distribution', 'Params', 'KS_stat', 'AIC', 'BIC']]
gof_df.sort_values(by=['Variable', 'KS_stat'], inplace=True)

# Export to CSV
gof_df.to_csv("data/clean/gof_distribution_fits.csv", index=False)

# Preview
print(gof_df)

